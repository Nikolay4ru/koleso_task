<?php
namespace App\Services;

use App\Models\Notification;
use PDO;

class NotificationService {
    private $db;
    private $notification;
    private $emailService;
    private $telegramService;
    
    public function __construct(PDO $db, EmailService $emailService, TelegramService $telegramService) {
        $this->db = $db;
        $this->notification = new Notification($db);
        $this->emailService = $emailService;
        $this->telegramService = $telegramService;
    }
    
    public function notifyTaskCreated($taskId, $creatorId) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        $task = $this->getTaskInfo($taskId);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        $recipients = $this->getTaskRecipients($taskId);
        
        foreach ($recipients as $recipient) {
            if ($recipient['id'] == $creatorId) continue;
            
            $title = "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {$task['title']}";
            $message = "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ –∑–∞–¥–∞—á—É '{$task['title']}'";
            
            // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î
            $this->notification->create([
                'user_id' => $recipient['id'],
                'type' => 'task_created',
                'title' => $title,
                'message' => $message,
                'task_id' => $taskId
            ]);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            if ($recipient['email_notifications']) {
                $this->emailService->send($recipient['email'], $title, $message);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            if ($recipient['telegram_notifications'] && $recipient['telegram_chat_id']) {
                $this->telegramService->sendMessage($recipient['telegram_chat_id'], $message);
            }
        }
    }
    
    public function notifyStatusChanged($taskId, $oldStatus, $newStatus, $changedBy) {
        $task = $this->getTaskInfo($taskId);
        $recipients = $this->getTaskRecipients($taskId);
        
        $statusLabels = [
            'backlog' => '–ë—ç–∫–ª–æ–≥',
            'todo' => '–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é',
            'in_progress' => '–í —Ä–∞–±–æ—Ç–µ',
            'review' => '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
            'done' => '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
        ];
        
        foreach ($recipients as $recipient) {
            if ($recipient['id'] == $changedBy) continue;
            
            $title = "–ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {$task['title']}";
            $message = "–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —Å '{$statusLabels[$oldStatus]}' –Ω–∞ '{$statusLabels[$newStatus]}'";
            
            $this->notification->create([
                'user_id' => $recipient['id'],
                'type' => 'status_changed',
                'title' => $title,
                'message' => $message,
                'task_id' => $taskId
            ]);
            
            if ($recipient['email_notifications']) {
                $this->emailService->send($recipient['email'], $title, $message);
            }
            
            if ($recipient['telegram_notifications'] && $recipient['telegram_chat_id']) {
                $this->telegramService->sendMessage($recipient['telegram_chat_id'], $message);
            }
        }
    }

    public function notifyTaskUpdated($taskId, $updatedBy) {
    $task = $this->getTaskInfo($taskId);
    $recipients = $this->getTaskRecipients($taskId);
    
    foreach ($recipients as $recipient) {
        if ($recipient['id'] == $updatedBy) continue;
        
        $title = "–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {$task['title']}";
        $message = "–ó–∞–¥–∞—á–∞ '{$task['title']}' –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞";
        
        $this->notification->create([
            'user_id' => $recipient['id'],
            'type' => 'task_updated',
            'title' => $title,
            'message' => $message,
            'task_id' => $taskId
        ]);
        
        if ($recipient['email_notifications']) {
            $this->emailService->send($recipient['email'], $title, $message);
        }
        
        if ($recipient['telegram_notifications'] && $recipient['telegram_chat_id']) {
            $this->telegramService->sendMessage($recipient['telegram_chat_id'], $message);
        }
    }
}

public function notifyNewComment($taskId, $commentAuthorId, $commentText) {
    $task = $this->getTaskInfo($taskId);
    $author = $this->getUserInfo($commentAuthorId);
    $recipients = $this->getTaskRecipients($taskId);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    $creator = $this->getUserInfo($task['creator_id']);
    if ($creator && $creator['id'] != $commentAuthorId) {
        $recipients[] = $creator;
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    $uniqueRecipients = [];
    $seenIds = [];
    foreach ($recipients as $recipient) {
        if (!in_array($recipient['id'], $seenIds) && $recipient['id'] != $commentAuthorId) {
            $uniqueRecipients[] = $recipient;
            $seenIds[] = $recipient['id'];
        }
    }
    
    foreach ($uniqueRecipients as $recipient) {
        $title = "–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ: {$task['title']}";
        $message = "{$author['name']} –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª: " . mb_substr($commentText, 0, 100) . 
                   (mb_strlen($commentText) > 100 ? '...' : '');
        
        $this->notification->create([
            'user_id' => $recipient['id'],
            'type' => 'new_comment',
            'title' => $title,
            'message' => $message,
            'task_id' => $taskId
        ]);
        
        if ($recipient['email_notifications']) {
            $fullMessage = "{$author['name']} –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ '{$task['title']}':\n\n" . 
                          $commentText . "\n\n" .
                          "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É: https://task.koleso.app/tasks/view/{$taskId}#comments";
            
            $this->emailService->send($recipient['email'], $title, $fullMessage);
        }
        
        if ($recipient['telegram_notifications'] && $recipient['telegram_chat_id']) {
            $telegramMessage = "üí¨ <b>–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n\n" .
                              "–ó–∞–¥–∞—á–∞: {$task['title']}\n" .
                              "–û—Ç: {$author['name']}\n\n" .
                              "<i>" . htmlspecialchars($commentText) . "</i>";
            
            $this->telegramService->sendMessage($recipient['telegram_chat_id'], $telegramMessage);
        }
    }
}

private function getUserInfo($userId) {
    $sql = "SELECT * FROM users WHERE id = :id";
    $stmt = $this->db->prepare($sql);
    $stmt->execute([':id' => $userId]);
    return $stmt->fetch(PDO::FETCH_ASSOC);
}
    
    private function getTaskInfo($taskId) {
        $sql = "SELECT * FROM tasks WHERE id = :id";
        $stmt = $this->db->prepare($sql);
        $stmt->execute([':id' => $taskId]);
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }
    
    private function getTaskRecipients($taskId) {
        $sql = "SELECT DISTINCT u.* FROM users u
                LEFT JOIN task_assignees ta ON u.id = ta.user_id
                LEFT JOIN task_watchers tw ON u.id = tw.user_id
                WHERE ta.task_id = :task_id OR tw.task_id = :task_id2";
        
        $stmt = $this->db->prepare($sql);
        $stmt->execute([':task_id' => $taskId, ':task_id2' => $taskId]);
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
}