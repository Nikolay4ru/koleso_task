<?php
namespace App\Controllers;

use App\Models\User;
use App\Models\Department;
use App\Models\Task;
use App\Services\NotificationService;

class UserController {
    private $db;
    private $user;
    private $department;
    private $task;
    
    public function __construct($db) {
        $this->db = $db;
        $this->user = new User($db);
        $this->department = new Department($db);
        $this->task = new Task($db);
    }
    
    public function profile() {
        $userId = $_SESSION['user_id'];
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        $user = $this->user->findById($userId);
        
        if (!$user) {
            header('Location: /logout');
            exit;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $stats = $this->user->getTaskStatistics($userId);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏
        $recentTasks = $this->task->getUserRecentTasks($userId, 10);
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        $activeTasks = $this->task->getActiveTasksForUser($userId);
        
        require_once __DIR__ . '/../../views/profile/index.php';
    }
    
    public function settings() {
        $userId = $_SESSION['user_id'];
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        $user = $this->user->findById($userId);
        
        if (!$user) {
            header('Location: /logout');
            exit;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤
        $departments = $this->department->getAll();
        
        require_once __DIR__ . '/../../views/profile/settings.php';
    }
    
    public function update() {
        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            header('Location: /profile/settings');
            exit;
        }
        
        $userId = $_SESSION['user_id'];
        $section = $_POST['section'] ?? '';
        
        switch ($section) {
            case 'general':
                $this->updateGeneral($userId);
                break;
                
            case 'notifications':
                $this->updateNotifications($userId);
                break;
                
            case 'security':
                $this->updateSecurity($userId);
                break;
                
            default:
                header('Location: /profile/settings');
        }
    }
    
    private function updateGeneral($userId) {
        $data = [
            'name' => trim($_POST['name'] ?? ''),
            'phone' => $_POST['phone'] ?? null,
            'department_id' => $_POST['department_id'] ?? null,
            'bio' => $_POST['bio'] ?? null
        ];
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (empty($data['name'])) {
            $error = '–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
            $user = $this->user->findById($userId);
            $departments = $this->department->getAll();
            require_once __DIR__ . '/../../views/profile/settings.php';
            return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
        if (isset($_FILES['avatar']) && $_FILES['avatar']['error'] === UPLOAD_ERR_OK) {
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            // –ü—Ä–∏–º–µ—Ä:
            // $avatarPath = $this->uploadAvatar($_FILES['avatar']);
            // $data['avatar'] = $avatarPath;
        }
        
        try {
            $this->user->update($userId, $data);
            $_SESSION['user_name'] = $data['name'];
            $_SESSION['success'] = '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω';
            $_SESSION['section'] = 'general';
        } catch (\Exception $e) {
            $_SESSION['error'] = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è';
            error_log('Profile update error: ' . $e->getMessage());
        }
        
        header('Location: /profile/settings#general');
        exit;
    }
    
    private function updateNotifications($userId) {
        $data = [
            'email_notifications' => isset($_POST['email_notifications']) ? 1 : 0,
            'telegram_notifications' => isset($_POST['telegram_notifications']) ? 1 : 0,
            'telegram_chat_id' => $_POST['telegram_chat_id'] ?? null
        ];
        
        // –û—á–∏—â–∞–µ–º telegram_chat_id –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π
        if (empty($data['telegram_chat_id'])) {
            $data['telegram_chat_id'] = null;
        }
        
        try {
            $this->user->updateSettings($userId, $data);
            $_SESSION['success'] = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã';
            $_SESSION['section'] = 'notifications';
        } catch (\Exception $e) {
            $_SESSION['error'] = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫';
            error_log('Notification settings error: ' . $e->getMessage());
        }
        
        header('Location: /profile/settings#notifications');
        exit;
    }
    
    private function updateSecurity($userId) {
        $currentPassword = $_POST['current_password'] ?? '';
        $newPassword = $_POST['new_password'] ?? '';
        $confirmPassword = $_POST['new_password_confirm'] ?? '';
        
        // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
        if (empty($currentPassword) && empty($newPassword)) {
            header('Location: /profile/settings#security');
            exit;
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        $errors = [];
        
        if (empty($currentPassword)) {
            $errors[] = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å';
        }
        
        if (empty($newPassword)) {
            $errors[] = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å';
        } elseif (strlen($newPassword) < 8) {
            $errors[] = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤';
        } elseif (!preg_match('/[A-Z]/', $newPassword)) {
            $errors[] = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É';
        } elseif (!preg_match('/[0-9]/', $newPassword)) {
            $errors[] = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É';
        }
        
        if ($newPassword !== $confirmPassword) {
            $errors[] = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
        }
        
        if (!empty($errors)) {
            $error = implode('<br>', $errors);
            $user = $this->user->findById($userId);
            $departments = $this->department->getAll();
            require_once __DIR__ . '/../../views/profile/settings.php';
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
        $user = $this->user->findById($userId);
        if (!password_verify($currentPassword, $user['password'])) {
            $error = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å';
            $departments = $this->department->getAll();
            require_once __DIR__ . '/../../views/profile/settings.php';
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
        try {
            $this->user->updatePassword($userId, $newPassword);
            $_SESSION['success'] = '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω';
            $_SESSION['section'] = 'security';
        } catch (\Exception $e) {
            $_SESSION['error'] = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è';
            error_log('Password update error: ' . $e->getMessage());
        }
        
        header('Location: /profile/settings#security');
        exit;
    }
    
    public function testNotification() {
        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            http_response_code(405);
            echo json_encode(['success' => false, 'error' => 'Method not allowed']);
            exit;
        }
        
        $userId = $_SESSION['user_id'];
        $user = $this->user->findById($userId);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        $notificationModel = new \App\Models\Notification($this->db);
        $notificationId = $notificationModel->create([
            'user_id' => $userId,
            'type' => 'test',
            'title' => '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
            'message' => '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            'task_id' => null
        ]);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å—ã
        $emailService = new \App\Services\EmailService($GLOBALS['mailConfig']);
        $telegramService = new \App\Services\TelegramService($GLOBALS['telegramConfig']['bot_token']);
        
        $success = true;
        $errors = [];
        
        // Email
        if ($user['email_notifications']) {
            $emailSent = $emailService->send(
                $user['email'],
                '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
                '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –ï—Å–ª–∏ –≤—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª–∏, –∑–Ω–∞—á–∏—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!'
            );
            
            if (!$emailSent) {
                $errors[] = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email';
                $success = false;
            }
        }
        
        // Telegram
        if ($user['telegram_notifications'] && $user['telegram_chat_id']) {
            $result = $telegramService->sendMessage(
                $user['telegram_chat_id'],
                "üîî <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
            );
            
            if (!$result || !$result['ok']) {
                $errors[] = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram';
                $success = false;
            }
        }
        
        header('Content-Type: application/json');
        echo json_encode([
            'success' => $success,
            'error' => implode(', ', $errors)
        ]);
    }
    
    public function delete() {
        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            header('Location: /profile/settings');
            exit;
        }
        
        $userId = $_SESSION['user_id'];
        $password = $_POST['password'] ?? '';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        $user = $this->user->findById($userId);
        if (!password_verify($password, $user['password'])) {
            $_SESSION['error'] = '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å';
            header('Location: /profile/settings#advanced');
            exit;
        }
        
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
            $this->user->delete($userId);
            session_destroy();
            header('Location: /login');
        } catch (\Exception $e) {
            $_SESSION['error'] = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞';
            header('Location: /profile/settings#advanced');
        }
    }
}